{% comment %}
one single instance -> basis for a scenario
Ignore instances named "TASTE_System"
{% endcomment %}
{% if instance.name != "TASTE_System" %}

@Scenario
def Exercise_{{ instance.name }}{% if instance.denominatorAndKind %}: {{ instance.denominatorAndKind }} {{ instance.inheritance }}{% endif %}(queue):
{% for event in instance.events %}
{% if event.entityType == event.Action %}
{% include "mscaction.tmplt" %}
{% endif %}
{% if event.entityType == event.Condition %}
{% include "msccondition.tmplt" %}
{% endif %}
{% if event.entityType == event.Coregion %}
{% include "msccoregion.tmplt" %}
{% endif %}
{% if event.entityType == event.Create %}
{% include "msccreate.tmplt" %}
{% endif %}
{% if event.entityType == event.Message %}
{% include "mscmessage.tmplt" %}
{% endif %}
{% if event.entityType == event.Timer %}
{% include "msctimer.tmplt" %}
{% endif %}
{% endfor %}
{% if instance.explicitStop %}
    return{% else %}{% endif %}

# Entry point
def runScenario(pipe_in=None, pipe_out=None, udpController=None):
    # Queue for getting scenario status
    log = queue.Queue()
    if udpController:
        {{ instance.name }} = Exercise_{{ instance.name }}(log, name='Exercise_{{ instance.name }}')
        udpController.slots.append({{ instance.name }}.msq_q)
        {{ instance.name }}.wait()
        udpController.slots.remove({{ instance.name }}.msg_q)
        return 0 # {{ instance.name }}.status
    else:
    # Use message queue (TASTE default)
        poller = PollerThread()
        {{ instance.name }} = Exercise_{{ instance.name }}(log, name='Exercise_{{ instance.name }}')
        poller.slots.append({{ instance.name }}.msg_q)
        poller.start()
        {{ instance.name }}.start()
        # Wait and log messages from both scenarii
        while True:
            time.sleep(0.001)
            try:
                scenario, severity, msg = log.get(block=False)
            except queue.Empty:
                pass
            else:
                log.task_done()
                try:
                    # If called from the GUI, send log through pipe
                    pipe_out.send((scenario, severity, msg))
                except AttributeError:
                    print('[{level}] {name} - {msg}'.format
                        (level=severity, name=scenario, msg=msg))
                if severity == 'ERROR' or msg == 'END':
                    # Stop execution on first error or completed scenario
                    try:
                        # send to GUI
                        pipe_out.send(('All', 'COMMAND', 'END'))
                    except AttributeError:
                        {{ instance.name }}.stop()
                        poller.stop()
                        if severity == 'ERROR':
                            return 1
                        else:
                            return 0
                try:
                    if pipe_out.poll():
                        cmd = pipe_out.recv()
                        if cmd == 'STOP':
                            {{ instance.name }}.stop()
                            poller.stop()
                            return 0
                except AttributeError:
                    pass

{% endif %}

