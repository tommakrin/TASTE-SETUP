#!/bin/bash
# $1 may be the interfaceview in AADL (optional if a file called InterfaceView.aadl is present)
# $2 is the output directory
# this script builds a unique dataview.aadl file and calls buildsupport with --gw --aadlv2 -o $2 --keep-case

# Check if the project works with kazoo. If so, skip all the rest
if [[ -f Makefile && $(grep KAZOO Makefile) != "" ]]
then
    make skeletons
    exit 0
fi


# Initialise the progress bar
myfifo=/tmp/$$$RANDOM
mkfifo $myfifo
tail -f $myfifo | taste-progress-dialog.py &

mkdir -p .cache
export PROJECT_CACHE=$(pwd)/.cache

function quit {
    echo '100 Completed' > $myfifo
    rm $myfifo
    tailps=$(pstree -p $$ | grep tail | python -c "try:
    import sys, re; print re.search(r'tail\((.*)\)', [x for x in sys.stdin][0]).group(1)
except: pass")
    if [ ! -z $tailps ]
    then
        kill $tailps 2>&1 || xterm -e "echo Internal Error in taste-update-data-view"
    fi
    exit $1
}

# Install a trap handler to make sure Ctrl-C leads to calling the quit function (trap 2 = SINGINT)
trap 2 quit 1

# Logging with colors (only in a terminal)
if [ -t 1 ] ; then
    COLORON="\e[1m\e[32m"
    REDCOLORON="\e[1m\e[31m"
    COLOROFF="\e[0m"
else
    COLORON=""
    REDCOLORON=""
    COLOROFF=""
fi
INFO="${COLORON}[INFO]${COLOROFF}"
ERROR="${REDCOLORON}[ERROR]${COLOROFF}"


# First check if an existing file is given as first argument (interface view)
# If not, check for the presence of a file called "InterfaceView.aadl".
# If no file is present or given, return an error with the command line.
if [ ! -f "$1" ]
then
    if [ -f InterfaceView.aadl ]
    then
        INTERFACEVIEW=InterfaceView.aadl
    else
        echo -e "${ERROR} Interface view not found
        Usage: [FORCE=1] taste-generate-skeletons [InterfaceView.aadl] [output-directory]"
        quit 1
    fi
else
    INTERFACEVIEW="$1"
    shift
fi

grep -i taste-directives.aadl "$INTERFACEVIEW" >/dev/null && {
    echo -e "${ERROR} Your interface view needs to be upgraded\!"
    echo -e "        Please upgrade it with:"
    echo
    echo -e "          taste-upgrade-IF-view oldIFview newIFview"
    echo
    echo -e "        ...and use the newIFview instead."
    quit 1
}

# Second, check if an output directory is passed as second argument
if [ -z "$1" ] 
then 
    output_dir=. 
else 
    output_dir="$1" 
fi

AADL_PROPERTIES="$(taste-config --prefix)/share/config_ellidiss/TASTE_IV_Properties.aadl"

if [[ -f InterfaceView.md5 && -z $FORCE ]]
then
    before=$(cat InterfaceView.md5)
    after=$(md5sum "$INTERFACEVIEW")
    if [ "$before" == "$after" ]
    then
        echo -e "${INFO} Interface View has not changed since last call"
        echo -e "${INFO} If you want to force generation of the skeletons anyway, type:"
        echo -e "${INFO} $ FORCE=1 taste-generate-skeletons"
        quit 0
    fi
fi

md5sum "$INTERFACEVIEW" > InterfaceView.md5

# Detect models from Ellidiss tools v2, and convert them to 1.3
grep "version => \"2" "$INTERFACEVIEW" >/dev/null && {
   echo -e "${INFO} Converting interface view from V2 to V1.3"
   echo '0-40 Analysing Interface View' > $myfifo
   cp -f "$INTERFACEVIEW" "$output_dir"/__interfaceview-v2.aadl
   TASTE --load-interface-view "$output_dir"/__interfaceview-v2.aadl --export-interface-view-to-1_3 "$INTERFACEVIEW"
};

mkdir -p "$output_dir" 2>/dev/null && shift || output_dir=.
mkdir -p "$output_dir"/debug
echo -e "${INFO} Collecting ASN.1 files"
echo '40-80 Collecting ASN.1 models' > $myfifo
# create dataview-uniq.asn including TASTE directives (flag -j)
mono $(which taste-extract-asn-from-design.exe) -i "$INTERFACEVIEW" -j "$output_dir"/dataview-uniq.asn
cp "$output_dir"/dataview-uniq.asn "$output_dir"/debug/dataview-uniq-minus-j.asn
echo -e "${INFO} Generating AADL data view"
asn2aadlPlus "$output_dir"/dataview-uniq.asn "$output_dir"/dataview-uniq.aadl -aadlv2
asn2aadlPlus "$output_dir"/dataview-uniq.asn "$output_dir"/dataview-uniq-v1.aadl
# create dataview-uniq.asn excluding TASTE directives (flag -k)
mono $(which taste-extract-asn-from-design.exe) -i "$INTERFACEVIEW" -k "$output_dir"/dataview-uniq.asn
cp "$output_dir"/dataview-uniq.asn "$output_dir"/debug/dataview-uniq-minus-k.asn
echo -e "${INFO} Parsing AADL and generating skeletons with buildsupport"
echo '80-100 Generate code skeletons' > $myfifo
buildsupport -i "$INTERFACEVIEW" -d "$output_dir"/dataview-uniq.aadl --gw --aadlv2 -o "$output_dir" --keep-case "$AADL_PROPERTIES" "$@"
if [ $? -eq 0 ]
then
    echo -e "${INFO} Completed generation of code skeletons"
    ret=0
else
    echo -e "${ERROR} Generation of code skeletons failed"
    rm -f InterfaceView.md5
    ret=1
fi
cp -f __interfaceview-v2.aadl "$INTERFACEVIEW" 2>/dev/null || :
rm -f "$output_dir"/dataview-uniq.asn "$output_dir"/dataview-uniq.aadl "$output_dir"/dataview-uniq-v1.aadl \
      "$output_dir"/__interfaceview-v2.aadl


quit $ret


